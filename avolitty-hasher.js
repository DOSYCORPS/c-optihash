const _0_0 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]

const avolittyHasher = function(_0_1, _0_2) {
	let _0_3 = []
	let _0_4 = " "
	let _0_5 = _0_2.outputLength
	let _0_6 = 2
	let _0_7 = 0
	let _0_8 = 0

	if (_0_2._0_2_0 == void 0) {
		_0_2._0_2_0 = []

		while (_0_5 != _0_7) {
			_0_2._0_2_0[_0_7++] = 0
		}
	}

	if (_0_2._0_2_1 != void 0) {
		_0_4 += _0_2._0_2_1
	}

	_0_7 = -1

	if (typeof _0_1 != "string") {
		_0_8 = 1

		if (typeof _0_1 == "object" && _0_1 != null) {
			_0_3 = Object.keys(_0_1)

			if (_0_3[0] == void 0) {
				_0_4 += _0_1 + " "
			} else if (_0_2.ignoreObjectKeySortOrder == true) {
				_0_3 = _0_3.sort()
				_0_4 += " "
			}

			_0_8 = _0_3.length

			while (++_0_7 != _0_8) {
				_0_2._0_2_1 = _0_4

				if (_0_1 != _0_1[_0_3[_0_7]]) {
					_0_4 = avolittyHasher(_0_1[_0_3[_0_7]], _0_2)
				} else {
					_0_4 = avolittyHasher(_0_3[_0_7], _0_2)
				}
			}

			_0_1 = _0_4
			_0_8 = 1
		}
	}

	if (_0_8 == 1) {
		_0_6 = (_0_6 + (_0_6 >> 1) & 65535) + 56789
		_0_2._0_2_0[--_0_8] = _0_6
	}

	_0_1 += _0_4
	_0_7 = _0_1.length

	while (_0_7-- != 0) {
		_0_6 = _0_1.charCodeAt(_0_7) + (_0_6 + (_0_6 >> 1) & 65535) + 2

		if (_0_8-- == 0) {
			_0_8 = _0_5 - 1
		}

		_0_2._0_2_0[_0_8] = _0_2._0_2_0[_0_8] + _0_6 & 15
	}

	_0_1 = ""

	while (_0_5-- != 0) {
		_0_2._0_2_0[_0_5] = _0_6
		_0_6 = (_0_2._0_2_0[_0_5] + _0_2._0_2_0[++_0_7] + (_0_6 + (_0_5 + _0_6 >> 1)) & 65535) + 2
		_0_2._0_2_0[_0_7] = _0_6
		_0_1 += _0_0[_0_6 & 15]
	}

	return _0_1
}

if (typeof module != 'undefined' && module.exports != void 0) {
	module.exports = avolittyHasher
}
