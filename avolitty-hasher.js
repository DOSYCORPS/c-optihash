const _0_0 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]

const avolittyHasher = function(_0_1, _0_2) {
    let _0_3 = []
    let _0_4 = _0_2 + ""
    let _0_5 = 8
    let _0_6 = -1

    if (typeof _0_1 != "string") {
        _0_5 = 1

        if (typeof _0_1 == "object" && _0_1 != null) {
            _0_3 = Object.keys(_0_1).sort()
            _0_5 = _0_3.length

            while (_0_5 != ++_0_6) {
                if (_0_1 != _0_1[_0_3[_0_6]]) {
                    _0_4 = avolittyHasher(_0_1[_0_3[_0_6]], _0_4)
                } else {
                    _0_4 = avolittyHasher(_0_3[_0_6], _0_4)
                }
            }

            _0_1 = _0_4
            _0_5 = 1
        }
    }

    _0_1 += _0_4
    _0_3 = [0, 0, 0, 0, 0, 0, 0, 0]
    _0_6 = _0_1.length
    let _0_7 = 2
    let _0_8 = 0
    let _0_9 = 0

    while (_0_6 != _0_8) {
        _0_7 = _0_1.charCodeAt(_0_8) + (_0_7 + (_0_7 >> 1) & 65535) + 2
        _0_9 = _0_8++ & 7
        _0_3[_0_9] = _0_7
    }

    if (_0_5 == 1) {
        _0_5 = 8
        _0_7 = (_0_7 + (_0_7 >> 1) & 65535) + 56789
        _0_3[_0_9] = _0_7
    }

    _0_1 = ""

    while (_0_5-- != 0) {
        _0_8 = 8

        while (_0_8-- != 0) {
            _0_7 = _0_3[_0_8] + (_0_7 + (_0_7 + 2 >> 1)) & 65535
            _0_3[_0_8] = _0_7
        }

        _0_8 = _0_3[_0_5] & 15
        _0_1 += _0_0[_0_8]
    }

    return _0_1
}


if (typeof module != 'undefined' && typeof module.exports != 'undefined') {
    module.exports = avolittyHasher
}
